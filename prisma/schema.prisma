// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  genre     String?
  nation    String?
  born      DateTime?
  died      DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  rating    Int       @default(0)
  imageUrl  String?

  // relationships
  books Book[]

  @@map("author")
}

model Book {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  language  String?
  rating    Int       @default(0)
  imageUrl  String?

  // relational ids
  authorId Int

  // relationships
  author  Author           @relation(fields: [authorId], references: [id])
  tags    Tag[]
  readers ReaderBookFave[]

  @@map("book")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  books Book[]

  @@map("tag")
}

model Reader {
  id        Int       @id @default(autoincrement())
  name      String?
  clerkID   String?   @unique
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  books ReaderBookFave[]

  @@map("reader")
}

model ReaderBookFave {
  book     Book?   @relation(fields: [bookId], references: [id])
  bookId   Int
  reader   Reader? @relation(fields: [readerId], references: [id])
  readerId Int

  @@id([bookId, readerId])
}
